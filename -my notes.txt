Installed dependancies-special:

1.----react-router-dom
npm i react-router-dom

2. This is how 2 dependancies installing in 1 sentence
---2-react-toastify
---3-firebase
npm install react-toastify firebase

3. FIREBASE AUTHONTICATION

4. From FIREBASE- getAuth()

      export declare function getAuth(app?: FirebaseApp): Auth;

 * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
 * If no instance exists, initializes an Auth instance with platform-specific default dependencies.

      * @param app - The Firebase App.
      * @public

5. From FIREBASE -- Auth interface . (Just to see only)

          /**
          * Interface representing Firebase Auth service.
          *
          * @remarks
          * See {@link https://firebase.google.com/docs/auth/ | Firebase Authentication} for a full guide
          * on how to use the Firebase Auth service.
          *
          * @public
          */
          export declare interface Auth {
              /** The {@link @firebase/app#FirebaseApp} associated with the `Auth` service instance. */
              readonly app: FirebaseApp;
              /** The name of the app associated with the `Auth` service instance. */
              readonly name: string;
              /** The {@link Config} used to initialize this instance. */
              readonly config: Config;
              /**
              * Changes the type of persistence on the `Auth` instance.
              *
              * @remarks
              * This will affect the currently saved Auth session and applies this type of persistence for
              * future sign-in requests, including sign-in with redirect requests.
              *
              * This makes it easy for a user signing in to specify whether their session should be
              * remembered or not. It also makes it easier to never persist the Auth state for applications
              * that are shared by other users or have sensitive data.
              *
              * This method does not work in a Node.js environment.
              *
              * @example
              * ```javascript
              * auth.setPersistence(browserSessionPersistence);
              * ```
              *
              * @param persistence - The {@link Persistence} to use.
              */
              setPersistence(persistence: Persistence): Promise<void>;
              /**
              * The {@link Auth} instance's language code.
              *
              * @remarks
              * This is a readable/writable property. When set to null, the default Firebase Console language
              * setting is applied. The language code will propagate to email action templates (password
              * reset, email verification and email change revocation), SMS templates for phone authentication,
              * reCAPTCHA verifier and OAuth popup/redirect operations provided the specified providers support
              * localization with the language code specified.
              */
              languageCode: string | null;
              /**
              * The {@link Auth} instance's tenant ID.
              *
              * @remarks
              * This is a readable/writable property. When you set the tenant ID of an {@link Auth} instance, all
              * future sign-in/sign-up operations will pass this tenant ID and sign in or sign up users to
              * the specified tenant project. When set to null, users are signed in to the parent project.
              *
              * @example
              * ```javascript
              * // Set the tenant ID on Auth instance.
              * auth.tenantId = 'TENANT_PROJECT_ID';
              *
              * // All future sign-in request now include tenant ID.
              * const result = await signInWithEmailAndPassword(auth, email, password);
              * // result.user.tenantId should be 'TENANT_PROJECT_ID'.
              * ```
              *
              * @defaultValue null
              */
              tenantId: string | null;
              /**
              * The {@link Auth} instance's settings.
              *
              * @remarks
              * This is used to edit/read configuration related options such as app verification mode for
              * phone authentication.
              */
              readonly settings: AuthSettings;
              /**
              * Adds an observer for changes to the user's sign-in state.
              *
              * @remarks
              * To keep the old behavior, see {@link Auth.onIdTokenChanged}.
              *
              * @param nextOrObserver - callback triggered on change.
              * @param error - Deprecated. This callback is never triggered. Errors
              * on signing in/out can be caught in promises returned from
              * sign-in/sign-out functions.
              * @param completed - Deprecated. This callback is never triggered.
              */
              onAuthStateChanged(nextOrObserver: NextOrObserver<User | null>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;
              /**
              * Adds a blocking callback that runs before an auth state change
              * sets a new user.
              *
              * @param callback - callback triggered before new user value is set.
              *   If this throws, it blocks the user from being set.
              * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`
              *   callback throws, allowing you to undo any side effects.
              */
              beforeAuthStateChanged(callback: (user: User | null) => void | Promise<void>, onAbort?: () => void): Unsubscribe;
              /**
              * Adds an observer for changes to the signed-in user's ID token.
              *
              * @remarks
              * This includes sign-in, sign-out, and token refresh events.
              *
              * @param nextOrObserver - callback triggered on change.
              * @param error - Deprecated. This callback is never triggered. Errors
              * on signing in/out can be caught in promises returned from
              * sign-in/sign-out functions.
              * @param completed - Deprecated. This callback is never triggered.
              */
              onIdTokenChanged(nextOrObserver: NextOrObserver<User | null>, error?: ErrorFn, completed?: CompleteFn): Unsubscribe;
              /**
              * returns a promise that resolves immediately when the initial
              * auth state is settled. When the promise resolves, the current user might be a valid user
              * or `null` if the user signed out.
              */
              authStateReady(): Promise<void>;
              /** The currently signed-in user (or null). */
              readonly currentUser: User | null;
              /** The current emulator configuration (or null). */
              readonly emulatorConfig: EmulatorConfig | null;
              /**
              * Asynchronously sets the provided user as {@link Auth.currentUser} on the {@link Auth} instance.
              *
              * @remarks
              * A new instance copy of the user provided will be made and set as currentUser.
              *
              * This will trigger {@link Auth.onAuthStateChanged} and {@link Auth.onIdTokenChanged} listeners
              * like other sign in methods.
              *
              * The operation fails with an error if the user to be updated belongs to a different Firebase
              * project.
              *
              * @param user - The new {@link User}.
              */
              updateCurrentUser(user: User | null): Promise<void>;
              /**
              * Sets the current language to the default device/browser preference.
              */
              useDeviceLanguage(): void;
              /**
              * Signs out the current user. This does not automatically revoke the user's ID token.
              *
              * @remarks
              * This method is not supported by {@link Auth} instances created with a
              * {@link @firebase/app#FirebaseServerApp}.
              */
              signOut(): Promise<void>;
          }







6. From FIREBASE- getFirestore()

      export declare function getFirestore(app: FirebaseApp): Firestore;

 * Returns the existing default {@link Firestore} instance that is associated with the
   provided {@link @firebase/app#FirebaseApp}. 
 * If no instance exists, initializes a new instance with default settings.
 
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}
   instance is associated with.
 * @returns The default {@link Firestore} instance of the provided app.
 



new things:
1.
<input type="file" id='image' 
        accept='image/png, image/jpeg' 
          hidden/>

2. WHEN ".menu" cls get hover ".menu .sub-menu" cls has a property change (display property)

.menu:hover .sub-menu{
    display: block;
}

3.
<input onChange={(e)=>setUserName(e.target.value)} value={userName} ...other attributes.. />



SEARCH NET
1.
importing google fonts-synthax,fontfamily property

2.
overflow-y: scroll;

::-webkit-scrollbar{
  display: none;
}

3.
Array(12).fill("").map((item,index)=>( ))

4. 
below was index.css file.

img.dot{
  width: 15px !important;
}

5.
flex: 1;

  ex- .chat-input input{
          flex: 1;
      }

6.
position: absolute;, relative;


7.--------DONE----------
border: none;
    outline: none; 

8.
css
transform: translateX(-50%);

9. 
css- SPECIFICITY
study below web page
https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity

10.

    <input onChange={(e)=>setImage(e.target.files[0])} 
            hidden 
            type="file" accept='.png, .jpg, .jpeg' id="avatar" />
    <img src={image? URL.createObjectURL(image) : assets.avatar_icon} alt="" />



stopped--
2.6--1.41.20
2.9--2.01.45
2.13--2.22.45